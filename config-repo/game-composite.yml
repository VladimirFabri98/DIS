api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Vladimir Fabri
      url: https://github.com/VladimirFabri98
      email: vfficial98@gmail.com

  game-composite:

    get-composite-game:
      description: Returns a composite view of the specified game id
      notes: |
        # Normal response
        If the requested game id is found the method will return information regarding:
        1. Base game information
        2. Reviews
        3. Downloadable contents (DLCs)
        4. Events
        5. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        In the following cases, only a partial response be created (used to simplify testing of error conditions)

        ## Game id 200
        200 - Ok, but no reviews,dlcs and events will be returned

        ## Non numerical game id
        400 - A <b>Bad Request</b> error will be returned

        ## Game id 50
        404 - A <b>Not Found</b> error will be returned

        ## Negative game ids
        422 - An <b>Unprocessable Entity</b> error will be returned
    create-composite-game:
      description: Creates a composite game
      notes: |
        # Normal response
        The composite game information posted to the API will be splitted up and stored as separate game-info, dlc, event and review entities.

        # Expected error responses
        1. If a game with the same gameId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-game:
      description: Deletes a game composite
      notes: |
        # Normal response
        Entities for game information, dlcs, events and reviews related to the specificed gameId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing game will return <b>200 Ok</b>.

server.port: 7000
server.error.include-message: always
spring:
  application:
    name: game-composite

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    output-games:
      destination: games
      producer:
        required-groups:
          auditGroup
    output-reviews:
      destination: reviews
      producer:
        required-groups:
          auditGroup
    output-dlcs:
      destination: dlcs
      producer:
        required-groups:
          auditGroup
    output-game-events:
      destination: gameEvents
      producer:
        required-groups:
          auditGroup

spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

logging:
  level:
    root: INFO
    vladimir: DEBUG

---
spring.profiles: docker

server.port: 8081

eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:8761/eureka/
    
spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka    

